'scopeName': 'source.http'
'name': 'HTTP'
'fileTypes': [
  'http'
  'HTTP'
  'Http'
]
'firstLineMatch': '(^HTTP/)|(^[A-Z]+ .*? HTTP/\\d+(\\.\\d+)*)'
'patterns': [
  {
    'include': '#request'
  }
  {
    'include': '#response'
  }
  {
    'begin': '(?=\\n)'
    'end': '(?=\\n)'
    'patterns': [
      {
        'include': '#request'
      }
      {
        'include': '#response'
      }
      {
        'include': '#contentDisposition'
      }
      {
        'begin': '''(?xi)
  # Emacs modeline
  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
    css
  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
  |
  # Vim modeline
  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
    css
  (?=\\s|:|$)
'''
        'patterns': [
          {
            'include': 'source.css'
          }
        ]
      }
      {
        'begin': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/|(?<=!)\\b)
    (?:node|iojs|JavaScript)
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      (?:js|javascript)
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      javascript
    (?=\\s|:|$)
  )
'''
        'patterns': [
          {
            'include': 'source.js'
          }
        ]
      }
      {
        'begin': '''(?xi)
  # Document type definition
  <(?:!DOCTYPE\\s*)?html
  |
  # Emacs modeline
  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
    html
  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
  |
  # Vim modeline
  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
    x?html
  (?=\\s|:|$)
'''
        'patterns': [
          {
            'include': 'text.html.basic'
          }
        ]
      }
    ]
  }
]
repository:
  request: {
    'name': 'source.request.http'
    'begin': '^([A-Z]+) (.*?) (HTTP/\\d+(\\.\\d+)*)\\n'
    'beginCaptures':
      1:
        'name': 'keyword.control.http'
      2:
        'name': 'entity.name.function.http'
      3:
        'name': 'entity.name.type.http'
      4:
        'name': 'entity.name.type.http'
    'end': '(?=\\n)'
    'patterns': [
      {
        'include': '#header'
      }
    ]
  }
  response: {
    'name': 'source.response.http'
    'begin': '^(HTTP/\\d+(\\.\\d+)*) (\\d{3}) (.+?)\\n'
    'beginCaptures':
      1:
        'name': 'entity.name.type.http'
      2:
        'name': 'entity.name.type.http'
      3:
        'name': 'keyword.control.http'
      4:
        'name': 'entity.name.function.http'
    'end': '(?=\\n)'
    'patterns': [
      {
        'include': '#header'
      }
    ]
  }
  header: {
    'match': '^(\\S+?)(\\s?:\\s?)(.*)\\n$'
    'name': 'source.header.http'
    'captures':
      1:
        'name': 'variable.other.http'
      2:
        'name': 'punctuation.definition.block.http'
      3:
        'name': 'entity.name.http'
  }
  contentDisposition: {
    'match': '^(Content-Disposition)(\\s?:\\s?)form-data((;).*)?\\n$'
    'name': 'source.content-disposition.http'
    'captures':
      1:
        'name': 'variable.other.http'
      2:
        'name': 'punctuation.definition.block.http'
      3:
        'name': 'entity.name.http'
      4:
        'name': 'punctuation.definition.block.http'
  }
